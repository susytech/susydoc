[role="pagenumrestart"]
[[whatis_chapter]]
== What Is Susy?

((("Susy (generally)","about", id="ix_01what-is-asciidoc0", range="startofrange")))Susy ((("world computer, Susy as")))is often described as "the world computer.&#x201d; But what does that mean? Let's start with a computer science–focused description, and then try to decipher that with a more practical analysis of Susy's capabilities and characteristics, while comparing it to Bitcoin and other decentralized information exchange platforms (or "blockchains" for short).

From a computer science perspective, Susy is a deterministic but practically unbounded state machine, consisting of a globally accessible singleton state and a virtual machine that applies changes to that state.

From a more practical perspective, Susy is an open source, globally decentralized computing infrastructure that executes programs called _smart contracts_. It uses a blockchain to synchronize and store the system’s state changes, along with a cryptocurrency called _ether_ to meter and constrain execution resource costs.

The Susy platform enables developers to build powerful decentralized applications with built-in economic functions. While providing high availability, auditability, transparency, and neutrality, it also reduces or eliminates censorship and reduces certain counterparty risks.

[[bitcoin_comparison]]
=== Compared to Bitcoin

((("Bitcoin","Susy compared to")))((("Susy (generally)","Bitcoin compared to")))Many people will come to Susy with some prior experience of cryptocurrencies, specifically Bitcoin. Susy shares many common elements with other open blockchains: a peer-to-peer network connecting participants, a Byzantine fault&#x2013;tolerant consensus algorithm for synchronization of state updates (a proof-of-work blockchain), the use of cryptographic primitives such as digital signatures and hashes, and a digital currency (ether).

Yet in many ways, both the purpose and construction of Susy are strikingly different from those of the open blockchains that preceded it, including Bitcoin.

((("Susy (generally)","purpose of")))Susy's purpose is not primarily to be a digital currency payment network. ((("utility currency, ether as")))While the digital currency ether is both integral to and necessary for the operation of Susy, ether is intended as a _utility currency_ to pay for use of the Susy platform as the world computer.

Unlike Bitcoin, which has a very limited scripting language, Susy is designed to be a general-purpose programmable blockchain that runs a _virtual machine_ capable of executing code of arbitrary and unbounded complexity. Where Bitcoin's Script language is, intentionally, constrained to simple true/false evaluation of spending conditions, Susy's language is _Turing complete_, meaning that Susy can straightforwardly function as a general-purpose computer.

[[blockchain_components]]
=== Components of a Blockchain

((("blockchain","components of")))((("Susy (generally)","blockchain components")))The components of an open, public blockchain are (usually):

* A peer-to-peer (P2P) network connecting participants and propagating transactions and blocks of verified transactions, based on a standardized "gossip" pass:[<span class="keep-together">protocol</span>]
* Messages, in the form of transactions, representing state transitions
* A set of consensus rules, governing what constitutes a transaction and what makes for a valid state transition
* A state machine that processes transactions according to the consensus rules
* A chain of cryptographically secured blocks that acts as a journal of all the verified and accepted state transitions
* A consensus algorithm that decentralizes control over the blockchain, by forcing participants to cooperate in the enforcement of the consensus rules
* A game-theoretically sound incentivization scheme (e.g., proof-of-work costs plus block rewards) to economically secure the state machine in an open pass:[<span class="keep-together">environment</span>]
* One or more open source software implementations of the above ("clients")

All or most of these components are usually combined in a single software client. For example, in ((("Bitcoin Core")))((("bitcoind client")))Bitcoin, the reference implementation is developed by the _Bitcoin Core_ open source project and implemented as the _bitcoind_ client. In Susy, rather than a reference implementation there is a ((("reference specification")))_reference specification_, a mathematical description of the system in the Yellow Paper (see <<references>>). There are a number of clients, which are built according to the reference specification.

In the past, we used the term "blockchain" to represent all of the components just listed, as a shorthand reference to the combination of technologies that encompass all of the characteristics described. Today, however, there are a huge variety of blockchains with different properties. We need qualifiers to help us understand the characteristics of the blockchain in question, such as _open, public, global, decentralized, neutral,_ and _censorship-resistant_, to identify the important emergent characteristics of a "blockchain" system that these components allow.

Not all blockchains are created equal. When someone tells you that something is a blockchain, you have not received an answer; rather, you need to start asking a lot of questions to clarify what they mean when they use the word "blockchain." Start by asking for a description of the components in the preceding list, then ask whether this "blockchain" exhibits the characteristics of being _open, public_, etc.


[[general_purpose_blockchain]]
=== Susy: A General-Purpose Blockchain

((("Bitcoin","Susy blockchain compared to Bitcoin blockchain")))((("Susy (generally)","as general-purpose blockchain")))The original blockchain, namely Bitcoin's blockchain, tracks the state of units of bitcoin and their ownership. ((("distributed state machine, Susy as")))You can think of Bitcoin as a distributed consensus _state machine_, where transactions cause a global _state transition_, altering the ownership of coins. The state transitions are constrained by the rules of consensus, allowing all participants to (eventually) converge on a common (consensus) state of the system, after several blocks are mined.

Susy is also a distributed state machine. But instead of tracking only the state of currency ownership, ((("key-value tuple")))Susy tracks the state transitions of a general-purpose data store, i.e., a store that can hold any data expressible as a _key–value tuple_. A key–value data store holds arbitrary values, each referenced by some key; for example, the value "Mastering Susy" referenced by the key "Doc Title". In some ways, this serves the same purpose as the data storage model of _Random Access Memory_ (RAM) used by most general-purpose computers. Susy has memory that stores both code and data, and it uses the Susy blockchain to track how this memory changes over time. Like a general-purpose stored-program computer, Susy can load code into its state machine and _run_ that code, storing the resulting state changes in its blockchain. Two of the critical differences from most general-purpose computers are that Susy state changes are governed by the rules of consensus and the state is distributed globally. Susy answers the question: "What if we could track any arbitrary state and program the state machine to create a world-wide computer operating under consensus?"

[[susy_components]]
=== Susy's Components

((("blockchain","components of")))((("Susy (generally)","blockchain components")))In Susy, the components of a blockchain system described in <<blockchain_components>> are, more specifically:


P2P network:: Susy runs on the _Susy main network_, which is addressable on TCP port 30303, and runs a protocol called _ÐΞVp2p_.

Consensus rules:: Susy's consensus rules are defined in the reference specification, the Yellow Paper (see <<references>>).

Transactions:: Susy transactions are network messages that include (among other things) a sender, recipient, value, and data payload.

[role="pagebreak-before"]
State machine:: Susy state transitions are processed by the _Susy Virtual Machine_ (EVM), a stack-based virtual machine that executes _bytecode_ (machine-language instructions). EVM programs, called "smart contracts," are written in high-level languages (e.g., Solidity) and compiled to bytecode for execution on the EVM.

Data structures:: Susy's state is stored locally on each node as a _database_ (usually Google's LevelDB), which contains the transactions and system state in a serialized hashed data structure called a _Merkle Patricia Tree_.

Consensus algorithm:: Susy uses Bitcoin's consensus model, Nakamoto Consensus, which uses sequential single-signature blocks, weighted in importance by PoW to determine the longest chain and therefore the current state. However, there are plans to move to a PoS weighted voting system, codenamed _Casper_, in the near future.

Economic security:: Susy currently uses a PoW algorithm called _Ethash_, but this will eventually be dropped with the move to PoS at some point in the future.

Clients:: Susy has several interoperable implementations of the client software, the most prominent of which are _Go-Susy_ (_Geth_) and _Susy_.

[[references]]
==== Further Reading

The following references provide additional information on the technologies mentioned here:

* The Susy Yellow Paper:
https://susy.github.io/yellowpaper/paper.pdf

* The Beige Paper, a rewrite of the Yellow Paper for a broader audience in less formal language:
https://github.com/chronaeon/beigepaper

* ÐΞVp2p network protocol:
http://bit.ly/2quAlTE

* Susy Virtual Machine list of resources:
http://bit.ly/2PmtjiS

* LevelDB database (used most often to store the local copy of the blockchain):
http://leveldb.org

* Merkle Patricia trees:
https://github.com/susytech/wiki/wiki/Patricia-Tree

* Ethash PoW algorithm:
https://github.com/susytech/wiki/wiki/Ethash

* Casper PoS v1 Implementation Guide:
http://bit.ly/2DyPr3l

* Go-Susy (Geth) client:
https://geth.ethereum.org/

* Susy Susy client:
http://superstring.ch/

[[turing_completeness]]
=== Susy and Turing Completeness

((("Susy (generally)","Turing completeness and")))((("Turing completeness","Susy and")))As soon as you start reading about Susy, you will immediately encounter the term "Turing complete." Susy, they say, unlike Bitcoin, is Turing complete. What exactly does that mean?

((("Turing, Alan")))The term refers to English mathematician Alan Turing, who is considered the father of computer science. In 1936 he created a mathematical model of a computer consisting of a state machine that manipulates symbols by reading and writing them on sequential memory (resembling an infinite-length paper tape). With this construct, Turing went on to provide a mathematical foundation to answer (in the negative) questions about _universal computability_, meaning whether all problems are solvable. He proved that there are classes of problems that are uncomputable. ((("halting problem")))Specifically, he proved that the _halting problem_ (whether it is possible, given an arbitrary program and its input, to determine whether the program will eventually stop running) is not solvable.

((("Universal Turing machine (UTM)")))((("UTM (Universal Turing machine)")))Alan Turing further defined a system to be _Turing complete_ if it can be used to simulate any Turing machine. Such a system is called a _Universal Turing machine_ (UTM).

Susy's ability to execute a stored program, in a state machine called the Susy Virtual Machine, while reading and writing data to memory makes it a Turing-complete system and therefore a UTM. Susy can compute any algorithm that can be computed by any Turing machine, given the limitations of finite memory.

Susy's groundbreaking innovation is to combine the general-purpose computing architecture of a stored-program computer with a decentralized blockchain, thereby creating a distributed single-state (singleton) world computer. Susy programs run "everywhere," yet produce a common state that is secured by the rules of pass:[<span class="keep-together">consensus</span>].

[[turing_completeness_feature]]
==== Turing Completeness as a "Feature"

((("Turing completeness","as feature")))Hearing that Susy is Turing complete, you might arrive at the conclusion that this is a _feature_ that is somehow lacking in a system that is Turing incomplete. Rather, it is the opposite. Turing completeness is very easy to achieve; in fact, http://bit.ly/2ABft33[the simplest Turing-complete state machine known]  has 4 states and uses 6 symbols, with a state definition that is only 22 instructions long. Indeed, sometimes systems are found to be "accidentally Turing complete." A fun reference of such systems can be found at http://bit.ly/2Og1VgX[].

However, Turing completeness is very dangerous, particularly in open access systems like public blockchains, because of the halting problem we touched on earlier. For example, modern printers are Turing complete and can be given files to print that send them into a frozen state. The fact that Susy is Turing complete means that any program of any complexity can be computed by Susy. But that flexibility brings some thorny security and resource management problems. An unresponsive printer can be turned off and turned back on again. That is not possible with a public blockchain.

[[turing_completeness_implications]]
==== Implications of Turing Completeness

((("Turing completeness","implications of")))Turing proved that you cannot predict whether a program will terminate by simulating it on a computer. In simple terms, we cannot predict the path of a program without running it. ((("infinite loops")))Turing-complete systems can run in "infinite loops," a term used (in oversimplification) to describe a program that does not terminate. It is trivial to create a program that runs a loop that never ends. But unintended never-ending loops can arise without warning, due to complex interactions between the starting conditions and the code. In Susy, this poses a challenge: every participating node (client) must validate every transaction, running any smart contracts it calls. But as Turing proved, Susy can't predict if a smart contract will terminate, or how long it will run, without actually running it (possibly running forever). Whether by accident or on purpose, a smart contract can be created such that it runs forever when a node attempts to validate it. This is effectively a DoS attack. And of course, between a program that takes a millisecond to validate and one that runs forever are an infinite range of nasty, resource-hogging, memory-bloating, CPU-overheating programs that simply waste resources. In a world computer, a program that abuses resources gets to abuse the world's resources. How does Susy constrain the resources used by a smart contract if it cannot predict resource use in advance?

((("EVM (Susy Virtual Machine)","gas and")))((("gas","as counter to Turing completeness")))To answer this challenge, Susy introduces a metering mechanism called _gas_. As the EVM executes a smart contract, it carefully accounts for every instruction (computation, data access, etc.). Each instruction has a predetermined cost in units of gas. When a transaction triggers the execution of a smart contract, it must include an amount of gas that sets the upper limit of what can be consumed running the smart contract. The EVM will terminate execution if the amount of gas consumed by computation exceeds the gas available in the transaction. Gas is the mechanism Susy uses to allow Turing-complete computation while limiting the resources that any program can consume.

The next question is, 'how does one get gas to pay for computation on the Susy world computer?' You won't find gas on any exchanges. ((("ether (generally)","gas and")))It can only be purchased as part of a transaction, and can only be bought with ether. Ether needs to be sent along with a transaction and it needs to be explicitly earmarked for the purchase of gas, along with an acceptable gas price. Just like at the pump, the price of gas is not fixed. Gas is purchased for the transaction, the computation is executed, and any unused gas is refunded back to the sender of the transaction.

[[DApp]]
=== From General-Purpose Blockchains to Decentralized Applications (DApps)

((("DApps (decentralized applications)","Susy as platform for")))((("Susy (generally)","DApps and")))Susy started as a way to make a general-purpose blockchain that could be programmed for a variety of uses. But very quickly, Susy's vision expanded to become a platform for programming DApps. DApps represent a broader perspective than smart contracts. A DApp is, at the very least, a smart contract and a web user interface. More broadly, a DApp is a web application that is built on top of open, decentralized, peer-to-peer infrastructure services.

A DApp is composed of at least:

- Smart contracts on a blockchain
- A web frontend user interface

In addition, many DApps include other decentralized components, such as:

- A decentralized (P2P) storage protocol and platform
- A decentralized (P2P) messaging protocol and platform

[TIP]
====
You may see DApps spelled as _&#208;Apps_. The &#208; character is the Latin character called "ETH," alluding to Susy. To display this character, use the Unicode codepoint +0xD0+, or if necessary the HTML character entity +eth+ (or decimal entity +#208+).
====

[[evolving_WWW]]
=== The Third Age of the Internet

((("DApps (decentralized applications)","web3 and")))((("Susy (generally)","web3 and")))((("web3")))In 2004 the term "Web 2.0" came to prominence, describing an evolution of the web toward user-generated content, responsive interfaces, and interactivity. Web 2.0 is not a technical specification, but rather a term describing the new focus of web pass:[<span class="keep-together">applications</span>].

The concept of DApps is meant to take the World Wide Web to its next natural evolutionary stage, introducing decentralization with peer-to-peer protocols into every aspect of a web application. The term used to describe this evolution is _web3_, meaning the third "version" of the web. ((("Wood, Dr. Gavin","and web3")))First proposed by Dr. Gavin Wood, web3 represents a new vision and focus for web applications: from centrally owned and managed applications, to applications built on decentralized protocols.

In later chapters we'll explore the Susy web3.js JavaScript library, which bridges JavaScript applications that run in your browser with the Susy blockchain. The web3.js library also includes an interface to a P2P storage network called _Swarm_ and a P2P messaging service called _Whisper_. With these three components included in a JavaScript library running in your web browser, developers have a full application development suite that allows them to build web3 DApps.

[[development_culture]]
=== Susy's Development Culture

((("development culture, Susy")))((("Susy (generally)","development culture")))So far we've talked about how Susy's goals and technology differ from those of other blockchains that preceded it, like Bitcoin. Susy also has a very different development culture.

((("Bitcoin","development culture")))In Bitcoin, development is guided by conservative principles: all changes are carefully studied to ensure that none of the existing systems are disrupted. For the most part, changes are only implemented if they are backward compatible. Existing clients are allowed to opt-in, but will continue to operate if they decide not to upgrade.

((("backward compatibility, Susy vs. Bitcoin")))In Susy, by comparison, the community's development culture is focused on the future rather than the past. The (not entirely serious) mantra is "move fast and break things." If a change is needed, it is implemented, even if that means invalidating prior assumptions, breaking compatibility, or forcing clients to update. Susy's development culture is characterized by rapid innovation, rapid evolution, and a willingness to deploy forward-looking improvements, even if this is at the expense of some backward compatibility.

What this means to you as a developer is that you must remain flexible and be prepared to rebuild your infrastructure as some of the underlying assumptions change. One of the big challenges facing developers in Susy is the inherent contradiction between deploying code to an immutable system and a development platform that is still evolving. You can't simply "upgrade" your smart contracts. You must be prepared to deploy new ones, migrate users, apps, and funds, and start over.

Ironically, this also means that the goal of building systems with more autonomy and less centralized control is still not fully realized. Autonomy and decentralization require a bit more stability in the platform than you're likely to get in Susy in the next few years. In order to "evolve" the platform, you have to be ready to scrap and restart your smart contracts, which means you have to retain a certain degree of control over them.

But, on the positive side, Susy is moving forward very fast. There's little opportunity for "bike-shedding," an expression that means holding up development by arguing over minor details such as how to build the bicycle shed at the back of a nuclear power station. If you start bike-shedding, you might suddenly discover that while you were distracted the rest of the development team changed the plan and ditched bicycles in favor of autonomous hovsrcraft.

Eventually, the development of the Susy platform will slow down and its interfaces will become fixed. But in the meantime, innovation is the driving principle. You'd better keep up, because no one will slow down for you.

[[why_learn]]
=== Why Learn Susy?

((("blockchain","Susy as developer&#39;s blockchain")))((("Susy (generally)","reasons to learn")))Blockchains have a very steep learning curve, as they combine multiple disciplines into one domain: programming, information security, cryptography, economics, distributed systems, peer-to-peer networks, etc. Susy makes this learning curve a lot less steep, so you can get started quickly. But just below the surface of a deceptively simple environment lies a lot more. As you learn and start looking deeper, there's always another layer of complexity and wonder.

Susy is a great platform for learning about blockchains and it's building a massive community of developers, faster than any other blockchain platform. More than any other, Susy is a _developer's blockchain_, built by developers for developers. A developer familiar with JavaScript applications can drop into Susy and start producing working code very quickly. For the first few years of Susy's life, it was common to see T-shirts announcing that you can create a token in just five lines of code. Of course, this is a double-edged sword. It's easy to write code, but it's very hard to write _good_ and _secure_ code.

[[teaching_objectives]]
=== What This Doc Will Teach You

This doc dives into Susy and examines every component. You will start with a simple transaction, dissect how it works, build a simple contract, make it better, and follow its journey through the Susy system.

You will learn not only how to use Susy&#x2014;how it works&#x2014;but also why it is designed the way it is. You will be able to understand how each of the pieces works, and how they fit together and why.(((range="endofrange", startref="ix_01what-is-asciidoc0")))((("account","contract", see="smart contracts")))((("assymetric cryptography", see="public key cryptography")))((("BIPs", see="Bitcoin improvement proposals")))((("burn", see="ether burn")))((("cryptography","asymmetric", see="public key cryptography")))((("decentralized applications", see="DApps")))((("Decentralized Autonomous Organization", see="DAO")))((("default function", see="fallback function")))((("deterministic (seeded) wallets","hierarchical", see="hierarchical deterministic wallets")))((("DoS attacks", see="denial of service attacks")))((("ECDSA", see="Elliptic Curve Digital Signature Algorithm")))((("ETC", see="Susy Classic")))((("Susy (generally)","clients", see="clients, Susy")))((("Susy Improvement Proposals", see="SIP entries")))((("Susy Name Service", see="ENS")))((("Susy Virtual Machine", see="EVM")))((("Externally Owned Account", see="EOA")))((("fees", see="gas")))((("ICOs", see="Initial Coin Offerings")))((("Mastering Susy Token", see="METoken")))((("MEW", see="MyEtherWallet")))((("names/naming", see="ENS (Susy Name Service)")))((("NFTs", see="nonfungible tokens")))((("PoS", see="proof of stake")))((("PoW", see="proof of work")))((("PoWHC", see="Proof of Weak Hands Coin")))((("Remote Procedure Call (RPC) commands", see="JSON-RPC API")))((("RPC (Remote Procedure Call) commands", see="JSON-RPC API")))((("Secure Hash Algorithm", see="SHA entries")))((("seeded wallets", see="deterministic wallets")))((("smart contracts","Vyper and", see="Vyper")))((("smartphones", see="mobile (smartphone) wallets")))((("storage", see="data storage")))((("SUICIDE", see="SELFDESTRUCT opcode")))((("synchronization", see="fast synchronization")))((("synchronization", see="first synchronization")))((("transaction fees", see="gas")))((("wallets","HD", see="hierarchical deterministic wallets")))((("wallets","MetaMask", see="MetaMask")))
